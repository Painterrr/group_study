import java.util.*;
import java.io.*;

public class Main {
    static int[][] matrix;
    static boolean[] visited;
    static int n, m;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        int start = Integer.parseInt(st.nextToken());

        matrix = new int[n + 1][n + 1];
        
        for (int i = 0; i < m; i++) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            
            matrix[a][b] = 1;
            matrix[b][a] = 1;
        }
        
        visited = new boolean[n + 1];
        dfs(start);
        
        System.out.println();
                
        visited = new boolean[n + 1];
        bfs(start);

        br.close();
    }

    public static void dfs(int start) {
        visited[start] = true;
        System.out.print(start + " ");
        
        for (int i = 1; i <= n; i++) {
            if (matrix[start][i] == 1 && !visited[i]) {
                dfs(i);
            }
        }
    }

    public static void bfs(int start) {
        Queue<Integer> q = new LinkedList<>();

        q.add(start);
        visited[start] = true;

        while(!q.isEmpty()) {
            int now = q.poll();
            System.out.print(now + " ");
            for (int i = 1; i <= n; i++) {
                if (matrix[now][i] == 1 && !visited[i]) {
                    q.add(i);
                    visited[i] = true;
                }
            }
        }
        
    }
}
